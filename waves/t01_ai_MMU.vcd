$date
	Thu Jul 24 15:52:35 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_t01_ai_MMU $end
$var wire 1 ! res_valid $end
$var wire 18 " res_out [17:0] $end
$var wire 1 # done $end
$var reg 8 $ act_in [7:0] $end
$var reg 1 % act_valid $end
$var reg 1 & clk $end
$var reg 2 ' layer_sel [1:0] $end
$var reg 1 ( rst_n $end
$var reg 1 ) start $end
$var integer 32 * error_count [31:0] $end
$var integer 32 + output_count [31:0] $end
$var integer 32 , test_layer [31:0] $end
$scope module dut $end
$var wire 8 - act_in [7:0] $end
$var wire 1 % act_valid $end
$var wire 1 & clk $end
$var wire 2 . layer_sel [1:0] $end
$var wire 1 ( rst_n $end
$var wire 1 ) start $end
$var reg 1 / _sv2v_0 $end
$var reg 18 0 act_ext [17:0] $end
$var reg 6 1 bias_counter [5:0] $end
$var reg 1 # done $end
$var reg 36 2 full_prod [35:0] $end
$var reg 6 3 mac_counter [5:0] $end
$var reg 6 4 max_inputs [5:0] $end
$var reg 6 5 max_outputs [5:0] $end
$var reg 2 6 next_state [1:0] $end
$var reg 18 7 prod_18bit [17:0] $end
$var reg 18 8 q [17:0] $end
$var reg 18 9 res_out [17:0] $end
$var reg 1 ! res_valid $end
$var reg 2 : state [1:0] $end
$var reg 18 ; tmp [17:0] $end
$var reg 18 < w_ext [17:0] $end
$scope begin sv2v_autoblock_1 $end
$var reg 32 = i [31:0] $end
$scope begin sv2v_autoblock_2 $end
$var reg 32 > j [31:0] $end
$upscope $end
$upscope $end
$scope begin sv2v_autoblock_10 $end
$var reg 32 ? i [31:0] $end
$upscope $end
$scope begin sv2v_autoblock_11 $end
$var reg 32 @ i [31:0] $end
$upscope $end
$scope begin sv2v_autoblock_12 $end
$var reg 32 A i [31:0] $end
$upscope $end
$scope begin sv2v_autoblock_3 $end
$var reg 32 B i [31:0] $end
$scope begin sv2v_autoblock_4 $end
$var reg 32 C j [31:0] $end
$upscope $end
$upscope $end
$scope begin sv2v_autoblock_5 $end
$var reg 32 D i [31:0] $end
$scope begin sv2v_autoblock_6 $end
$var reg 32 E j [31:0] $end
$upscope $end
$upscope $end
$scope begin sv2v_autoblock_7 $end
$var reg 32 F i [31:0] $end
$scope begin sv2v_autoblock_8 $end
$var reg 32 G j [31:0] $end
$upscope $end
$upscope $end
$scope begin sv2v_autoblock_9 $end
$var reg 32 H j [31:0] $end
$upscope $end
$upscope $end
$scope task initialize_signals $end
$scope begin $ivl_for_loop0 $end
$var integer 32 I i [31:0] $end
$upscope $end
$upscope $end
$scope task reset_dut $end
$upscope $end
$scope task test_corner_cases $end
$upscope $end
$scope task test_layer_operation $end
$var integer 32 J expected_outputs_count [31:0] $end
$var integer 32 K input_count [31:0] $end
$var integer 32 L layer [31:0] $end
$var integer 32 M max_inputs [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 N timeout [31:0] $end
$upscope $end
$upscope $end
$scope task test_max_inputs $end
$scope begin $ivl_for_loop5 $end
$var integer 32 O i [31:0] $end
$upscope $end
$upscope $end
$scope task test_min_inputs $end
$scope begin $ivl_for_loop6 $end
$var integer 32 P i [31:0] $end
$upscope $end
$upscope $end
$scope task test_reset_during_operation $end
$scope begin $ivl_for_loop9 $end
$var integer 32 Q i [31:0] $end
$upscope $end
$upscope $end
$scope task test_start_during_operation $end
$scope begin $ivl_for_loop7 $end
$var integer 32 R i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 S i [31:0] $end
$upscope $end
$upscope $end
$scope task test_zero_inputs $end
$scope begin $ivl_for_loop3 $end
$var integer 32 T i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop4 $end
$var integer 32 U i [31:0] $end
$upscope $end
$upscope $end
$scope task verify_outputs $end
$var reg 1 V all_zero $end
$var reg 1 W any_negative $end
$var integer 32 X layer [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 Y i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#5335000
$dumpvars
b1 Y
b11 X
0W
0V
b100000 U
b100000 T
b100000 S
b1010 R
b1111 Q
b100000 P
b100000 O
b1 N
b100000 M
b11 L
b100000 K
b1 J
b100000 I
b100000 H
b100000 G
b100000 F
b100000 E
b100000 D
b100 C
b100000 B
b100000 A
b100000 @
b100000 ?
b100000 >
b100000 =
b111111111111111111 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b100000 5
b100000 4
b0 3
b0 2
b0 1
b0 0
0/
b1 .
b0 -
b100 ,
b1 +
b0 *
0)
1(
b1 '
1&
1%
b0 $
0#
b0 "
0!
$end
