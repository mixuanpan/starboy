$date
	Thu Jul 24 14:31:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1us
$end
$scope module t01_ai_cu_fsm_tb $end
$var wire 1 ! tetris_done $end
$var wire 1 " seq_start $end
$var wire 1 # preprocess_start $end
$var wire 1 $ postprocess_start $end
$var wire 1 % phase_writeback $end
$var wire 1 & phase_fetch $end
$var wire 1 ' phase_compute $end
$var wire 1 ( mem_write_req $end
$var wire 16 ) mem_write_len [15:0] $end
$var wire 32 * mem_write_addr [31:0] $end
$var wire 1 + mem_read_req $end
$var wire 16 , mem_read_len [15:0] $end
$var wire 32 - mem_read_addr [31:0] $end
$var wire 1 . layer_done $end
$var wire 4 / current_state [3:0] $end
$var wire 1 0 cnn_inference_start $end
$var parameter 32 1 ADDR_W $end
$var parameter 32 2 LEN_W $end
$var reg 1 3 clk $end
$var reg 1 4 cnn_inference_done $end
$var reg 1 5 game_state_ready $end
$var reg 32 6 ifm_base [31:0] $end
$var reg 16 7 ifm_len [15:0] $end
$var reg 1 8 mem_read_done $end
$var reg 1 9 mem_write_done $end
$var reg 32 : ofm_base [31:0] $end
$var reg 16 ; ofm_len [15:0] $end
$var reg 1 < postprocess_done $end
$var reg 1 = preprocess_done $end
$var reg 1 > rst $end
$var reg 1 ? seq_done $end
$var reg 1 @ start_decoded $end
$scope module instruction_decoder $end
$var wire 1 3 clk $end
$var wire 1 4 cnn_inference_done $end
$var wire 4 A current_state [3:0] $end
$var wire 1 5 game_state_ready $end
$var wire 32 B ifm_base [31:0] $end
$var wire 16 C ifm_len [15:0] $end
$var wire 1 8 mem_read_done $end
$var wire 1 9 mem_write_done $end
$var wire 32 D ofm_base [31:0] $end
$var wire 16 E ofm_len [15:0] $end
$var wire 1 < postprocess_done $end
$var wire 1 = preprocess_done $end
$var wire 1 > rst $end
$var wire 1 ? seq_done $end
$var wire 1 @ start_decoded $end
$var parameter 32 F ADDR_W $end
$var parameter 32 G LEN_W $end
$var reg 1 0 cnn_inference_start $end
$var reg 1 . layer_done $end
$var reg 32 H mem_read_addr [31:0] $end
$var reg 16 I mem_read_len [15:0] $end
$var reg 1 + mem_read_req $end
$var reg 32 J mem_write_addr [31:0] $end
$var reg 16 K mem_write_len [15:0] $end
$var reg 1 ( mem_write_req $end
$var reg 4 L n_state [3:0] $end
$var reg 1 ' phase_compute $end
$var reg 1 & phase_fetch $end
$var reg 1 % phase_writeback $end
$var reg 1 $ postprocess_start $end
$var reg 1 # preprocess_start $end
$var reg 1 " seq_start $end
$var reg 4 M state [3:0] $end
$var reg 1 ! tetris_done $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope task tog_cnn $end
$upscope $end
$scope task tog_post $end
$upscope $end
$scope task tog_prep $end
$upscope $end
$scope task tog_read $end
$upscope $end
$scope task tog_rst $end
$upscope $end
$scope task tog_seq $end
$upscope $end
$scope task tog_start $end
$upscope $end
$scope task tog_write $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 G
b100000 F
b10000 2
b100000 1
$end
#0
$dumpvars
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b1000101011 E
b110111100 D
b11011110 C
b101001101 B
b0 A
0@
0?
1>
0=
0<
b1000101011 ;
b110111100 :
09
08
b11011110 7
b101001101 6
15
04
03
00
b0 /
0.
b0 -
b0 ,
0+
b0 *
b0 )
0(
0'
0&
0%
0$
0#
0"
0!
$end
#1000
13
#2000
b1 L
03
1@
0>
#3000
1#
b1 /
b1 A
b1 M
13
#4000
b10 L
1#
03
1=
0@
#5000
b11011110 ,
b11011110 I
b101001101 -
b101001101 H
1+
1&
0#
b10 /
b10 A
b10 M
13
#6000
1&
b11011110 ,
b11011110 I
b101001101 -
b101001101 H
1+
03
0=
#7000
1"
b11 /
b11 A
b11 M
b100 L
0&
b0 ,
b0 I
b0 -
b0 H
0+
13
18
#8000
03
#9000
1'
b100 /
b100 A
b100 M
b100 L
0"
13
08
#10000
03
#11000
10
b101 /
b101 A
b101 M
b101 L
1'
13
1?
#12000
03
#13000
10
1'
13
0?
#14000
b110 L
10
1'
03
14
#15000
1$
00
0'
b110 /
b110 A
b110 M
13
#16000
1$
03
04
#17000
b1000101011 )
b1000101011 K
b110111100 *
b110111100 J
1(
1%
b111 /
b111 A
b111 M
b111 L
0$
13
1<
#18000
03
#19000
1%
b1000101011 )
b1000101011 K
b110111100 *
b110111100 J
1(
13
0<
#20000
03
#21000
13
#22000
b1000 L
1%
b1000101011 )
b1000101011 K
b110111100 *
b110111100 J
1(
03
19
#23000
b0 L
1!
1.
0%
b0 )
b0 K
b0 *
b0 J
0(
b1000 /
b1000 A
b1000 M
13
#24000
1!
b0 L
1.
03
09
#25000
0!
0.
b0 /
b0 A
b0 M
13
#26000
03
b1 N
#27000
13
