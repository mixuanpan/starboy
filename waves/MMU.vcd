$date
	Mon Jul  7 18:57:59 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module MMU_tb $end
$var wire 1 ! done $end
$var reg 1 " clk $end
$var reg 32 # inp_north0 [31:0] $end
$var reg 32 $ inp_north1 [31:0] $end
$var reg 32 % inp_north2 [31:0] $end
$var reg 32 & inp_north3 [31:0] $end
$var reg 32 ' inp_west0 [31:0] $end
$var reg 32 ( inp_west12 [31:0] $end
$var reg 32 ) inp_west4 [31:0] $end
$var reg 32 * inp_west8 [31:0] $end
$var reg 1 + rst $end
$var integer 32 , cycle_count [31:0] $end
$var integer 32 - mac_count [31:0] $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 32 . inp_north0 [31:0] $end
$var wire 32 / inp_north1 [31:0] $end
$var wire 32 0 inp_north2 [31:0] $end
$var wire 32 1 inp_north3 [31:0] $end
$var wire 32 2 inp_west0 [31:0] $end
$var wire 32 3 inp_west12 [31:0] $end
$var wire 32 4 inp_west4 [31:0] $end
$var wire 32 5 inp_west8 [31:0] $end
$var wire 1 + rst $end
$var wire 64 6 result9 [63:0] $end
$var wire 64 7 result8 [63:0] $end
$var wire 64 8 result7 [63:0] $end
$var wire 64 9 result6 [63:0] $end
$var wire 64 : result5 [63:0] $end
$var wire 64 ; result4 [63:0] $end
$var wire 64 < result3 [63:0] $end
$var wire 64 = result2 [63:0] $end
$var wire 64 > result15 [63:0] $end
$var wire 64 ? result14 [63:0] $end
$var wire 64 @ result13 [63:0] $end
$var wire 64 A result12 [63:0] $end
$var wire 64 B result11 [63:0] $end
$var wire 64 C result10 [63:0] $end
$var wire 64 D result1 [63:0] $end
$var wire 64 E result0 [63:0] $end
$var wire 32 F outp_south9 [31:0] $end
$var wire 32 G outp_south8 [31:0] $end
$var wire 32 H outp_south7 [31:0] $end
$var wire 32 I outp_south6 [31:0] $end
$var wire 32 J outp_south5 [31:0] $end
$var wire 32 K outp_south4 [31:0] $end
$var wire 32 L outp_south3 [31:0] $end
$var wire 32 M outp_south2 [31:0] $end
$var wire 32 N outp_south15 [31:0] $end
$var wire 32 O outp_south14 [31:0] $end
$var wire 32 P outp_south13 [31:0] $end
$var wire 32 Q outp_south12 [31:0] $end
$var wire 32 R outp_south11 [31:0] $end
$var wire 32 S outp_south10 [31:0] $end
$var wire 32 T outp_south1 [31:0] $end
$var wire 32 U outp_south0 [31:0] $end
$var wire 32 V outp_east9 [31:0] $end
$var wire 32 W outp_east8 [31:0] $end
$var wire 32 X outp_east7 [31:0] $end
$var wire 32 Y outp_east6 [31:0] $end
$var wire 32 Z outp_east5 [31:0] $end
$var wire 32 [ outp_east4 [31:0] $end
$var wire 32 \ outp_east3 [31:0] $end
$var wire 32 ] outp_east2 [31:0] $end
$var wire 32 ^ outp_east15 [31:0] $end
$var wire 32 _ outp_east14 [31:0] $end
$var wire 32 ` outp_east13 [31:0] $end
$var wire 32 a outp_east12 [31:0] $end
$var wire 32 b outp_east11 [31:0] $end
$var wire 32 c outp_east10 [31:0] $end
$var wire 32 d outp_east1 [31:0] $end
$var wire 32 e outp_east0 [31:0] $end
$var reg 4 f count [3:0] $end
$var reg 1 ! done $end
$scope module P0 $end
$var wire 1 " clk $end
$var wire 32 g inp_north [31:0] $end
$var wire 32 h inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 i multi [63:0] $end
$var reg 32 j outp_east [31:0] $end
$var reg 32 k outp_south [31:0] $end
$var reg 64 l result [63:0] $end
$upscope $end
$scope module P1 $end
$var wire 1 " clk $end
$var wire 32 m inp_north [31:0] $end
$var wire 32 n inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 o multi [63:0] $end
$var reg 32 p outp_east [31:0] $end
$var reg 32 q outp_south [31:0] $end
$var reg 64 r result [63:0] $end
$upscope $end
$scope module P10 $end
$var wire 1 " clk $end
$var wire 1 + rst $end
$var wire 64 s multi [63:0] $end
$var wire 32 t inp_west [31:0] $end
$var wire 32 u inp_north [31:0] $end
$var reg 32 v outp_east [31:0] $end
$var reg 32 w outp_south [31:0] $end
$var reg 64 x result [63:0] $end
$upscope $end
$scope module P11 $end
$var wire 1 " clk $end
$var wire 32 y inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 z multi [63:0] $end
$var wire 32 { inp_north [31:0] $end
$var reg 32 | outp_east [31:0] $end
$var reg 32 } outp_south [31:0] $end
$var reg 64 ~ result [63:0] $end
$upscope $end
$scope module P12 $end
$var wire 1 " clk $end
$var wire 32 !" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 "" multi [63:0] $end
$var wire 32 #" inp_north [31:0] $end
$var reg 32 $" outp_east [31:0] $end
$var reg 32 %" outp_south [31:0] $end
$var reg 64 &" result [63:0] $end
$upscope $end
$scope module P13 $end
$var wire 1 " clk $end
$var wire 32 '" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 (" multi [63:0] $end
$var wire 32 )" inp_north [31:0] $end
$var reg 32 *" outp_east [31:0] $end
$var reg 32 +" outp_south [31:0] $end
$var reg 64 ," result [63:0] $end
$upscope $end
$scope module P14 $end
$var wire 1 " clk $end
$var wire 32 -" inp_north [31:0] $end
$var wire 32 ." inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 /" multi [63:0] $end
$var reg 32 0" outp_east [31:0] $end
$var reg 32 1" outp_south [31:0] $end
$var reg 64 2" result [63:0] $end
$upscope $end
$scope module P15 $end
$var wire 1 " clk $end
$var wire 32 3" inp_north [31:0] $end
$var wire 32 4" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 5" multi [63:0] $end
$var reg 32 6" outp_east [31:0] $end
$var reg 32 7" outp_south [31:0] $end
$var reg 64 8" result [63:0] $end
$upscope $end
$scope module P2 $end
$var wire 1 " clk $end
$var wire 32 9" inp_north [31:0] $end
$var wire 32 :" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 ;" multi [63:0] $end
$var reg 32 <" outp_east [31:0] $end
$var reg 32 =" outp_south [31:0] $end
$var reg 64 >" result [63:0] $end
$upscope $end
$scope module P3 $end
$var wire 1 " clk $end
$var wire 32 ?" inp_north [31:0] $end
$var wire 32 @" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 A" multi [63:0] $end
$var reg 32 B" outp_east [31:0] $end
$var reg 32 C" outp_south [31:0] $end
$var reg 64 D" result [63:0] $end
$upscope $end
$scope module P4 $end
$var wire 1 " clk $end
$var wire 32 E" inp_north [31:0] $end
$var wire 32 F" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 G" multi [63:0] $end
$var reg 32 H" outp_east [31:0] $end
$var reg 32 I" outp_south [31:0] $end
$var reg 64 J" result [63:0] $end
$upscope $end
$scope module P5 $end
$var wire 1 " clk $end
$var wire 32 K" inp_north [31:0] $end
$var wire 32 L" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 M" multi [63:0] $end
$var reg 32 N" outp_east [31:0] $end
$var reg 32 O" outp_south [31:0] $end
$var reg 64 P" result [63:0] $end
$upscope $end
$scope module P6 $end
$var wire 1 " clk $end
$var wire 32 Q" inp_north [31:0] $end
$var wire 32 R" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 S" multi [63:0] $end
$var reg 32 T" outp_east [31:0] $end
$var reg 32 U" outp_south [31:0] $end
$var reg 64 V" result [63:0] $end
$upscope $end
$scope module P7 $end
$var wire 1 " clk $end
$var wire 32 W" inp_north [31:0] $end
$var wire 32 X" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 Y" multi [63:0] $end
$var reg 32 Z" outp_east [31:0] $end
$var reg 32 [" outp_south [31:0] $end
$var reg 64 \" result [63:0] $end
$upscope $end
$scope module P8 $end
$var wire 1 " clk $end
$var wire 32 ]" inp_north [31:0] $end
$var wire 32 ^" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 _" multi [63:0] $end
$var reg 32 `" outp_east [31:0] $end
$var reg 32 a" outp_south [31:0] $end
$var reg 64 b" result [63:0] $end
$upscope $end
$scope module P9 $end
$var wire 1 " clk $end
$var wire 32 c" inp_north [31:0] $end
$var wire 32 d" inp_west [31:0] $end
$var wire 1 + rst $end
$var wire 64 e" multi [63:0] $end
$var reg 32 f" outp_east [31:0] $end
$var reg 32 g" outp_south [31:0] $end
$var reg 64 h" result [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
bx _"
bx ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
bx G"
bx F"
b0 E"
b0 D"
b0 C"
b0 B"
bx A"
b0 @"
bx ?"
b0 >"
b0 ="
b0 <"
bx ;"
b0 :"
bx 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
bx ""
bx !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
bx o
b0 n
bx m
b0 l
b0 k
b0 j
bx i
bx h
bx g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
b0 -
b0 ,
1+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
0"
0!
$end
#3000
0+
b0 A"
b0 &
b0 1
b0 ?"
b0 ""
b0 (
b0 3
b0 !"
b0 ;"
b0 %
b0 0
b0 9"
b0 _"
b0 *
b0 5
b0 ^"
b0 o
b0 $
b0 /
b0 m
b0 G"
b0 )
b0 4
b0 F"
b100100 i
b1100 #
b1100 .
b1100 g
b11 '
b11 2
b11 h
#13000
b1101 $
b1101 /
b1101 m
b111 )
b111 4
b111 F"
b1000 #
b1000 .
b1000 g
b10000 i
b10 '
b10 2
b10 h
#23000
b1110 %
b1110 0
b1110 9"
b1011 *
b1011 5
b1011 ^"
b1001 $
b1001 /
b1001 m
b110 )
b110 4
b110 F"
b100 #
b100 .
b100 g
b100 i
b1 '
b1 2
b1 h
#33000
b1111 &
b1111 1
b1111 ?"
b1111 (
b1111 3
b1111 !"
b1010 %
b1010 0
b1010 9"
b1010 *
b1010 5
b1010 ^"
b101 $
b101 /
b101 m
b101 )
b101 4
b101 F"
b0 #
b0 .
b0 g
b0 i
b0 '
b0 2
b0 h
#41667
b1 f
b1111 a
b1111 $"
b1111 '"
b1010 W
b1010 `"
b1010 d"
b11001 M"
b101 [
b101 H"
b101 L"
b1111 L
b1111 C"
b1111 W"
b1010 M
b1010 ="
b1010 Q"
b101 T
b101 q
b101 K"
b10000 -
b1 ,
1"
#43000
b1011 &
b1011 1
b1011 ?"
b1110 (
b1110 3
b1110 !"
b110 %
b110 0
b110 9"
b1001 *
b1001 5
b1001 ^"
b1 $
b1 /
b1 m
b100 )
b100 4
b100 F"
#53000
b111 &
b111 1
b111 ?"
b1101 (
b1101 3
b1101 !"
b10 %
b10 0
b10 9"
b1000 *
b1000 5
b1000 ^"
b0 $
b0 /
b0 m
b0 )
b0 4
b0 F"
#63000
b11 &
b11 1
b11 ?"
b1100 (
b1100 3
b1100 !"
b0 %
b0 0
b0 9"
b0 *
b0 5
b0 ^"
#83334
0"
#125001
b0 T
b0 q
b0 K"
b0 M
b0 ="
b0 Q"
b11 L
b11 C"
b11 W"
b0 M"
b0 [
b0 H"
b0 L"
b0 W
b0 `"
b0 d"
b1100 a
b1100 $"
b1100 '"
b0 e"
b101 J
b101 O"
b101 c"
b0 S"
b101 Z
b101 N"
b101 R"
b11001 :
b11001 P"
b1100100 s
b1010 I
b1010 u
b1010 U"
b1111 H
b1111 {
b1111 ["
b1010 V
b1010 t
b1010 f"
b1111 `
b1111 *"
b1111 ."
b10 f
b100000 -
b10 ,
1"
#166668
0"
#208335
b11 f
b11100001 5"
b1111 _
b1111 0"
b1111 4"
b1100 `
b1100 *"
b1100 ."
b1111 R
b1111 }
b1111 3"
b1111000 /"
b1010 S
b1010 w
b1010 -"
b11110 z
b1010 c
b1010 v
b1010 y
b1100100 C
b1100100 x
b111100 ("
b101 F
b101 )"
b101 g"
b0 V
b0 t
b0 f"
b11 H
b11 {
b11 ["
b0 s
b0 I
b0 u
b0 U"
b1111 Y"
b101 Y
b101 T"
b101 X"
b0 J
b0 O"
b0 c"
b0 Z
b0 N"
b0 R"
b110000 -
b11 ,
1"
#250002
0"
#291669
b0 Y"
b0 Y
b0 T"
b0 X"
b101 X
b101 Z"
b1111 8
b1111 \"
b0 ("
b0 F
b0 )"
b0 g"
b0 /"
b0 S
b0 w
b0 -"
b0 z
b0 c
b0 v
b0 y
b11 R
b11 }
b11 3"
b1010 b
b1010 |
b11110 B
b11110 ~
b101 P
b101 +"
b111100 @
b111100 ,"
b1010 O
b1010 1"
b100100 5"
b1100 _
b1100 0"
b1100 4"
b1111000 ?
b1111000 2"
b1111 N
b1111 7"
b1111 ^
b1111 6"
b11100001 >
b11100001 8"
b100 f
b1000000 -
b100 ,
1"
#333336
0"
#375003
b101 f
b11 N
b11 7"
b1100 ^
b1100 6"
b100000101 >
b100000101 8"
b0 O
b0 1"
b0 P
b0 +"
b0 b
b0 |
b0 X
b0 Z"
b1010000 -
b101 ,
1"
#416670
0"
#458337
b100101001 >
b100101001 8"
b110 f
b1100000 -
b110 ,
1"
#500004
0"
#541671
b0 f
1!
b101001101 >
b101001101 8"
b1110000 -
b111 ,
1"
